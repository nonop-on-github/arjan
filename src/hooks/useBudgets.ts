
import { useState, useEffect } from 'react';
import { fetchUserBudgets, addUserBudget, updateUserBudget, deleteUserBudget } from '@/services/budgetService';
import { Budget, BudgetProgress } from '@/types/budget';
import { Transaction } from '@/types/finance';
import { useAuthContext } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

export const useBudgets = (transactions: Transaction[] = []) => {
  const [budgets, setBudgets] = useState<Budget[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [budgetProgress, setBudgetProgress] = useState<BudgetProgress[]>([]);
  const { user } = useAuthContext();
  const { toast } = useToast();

  // Fetch budgets
  useEffect(() => {
    const fetchBudgets = async () => {
      if (!user) return;
      
      setIsLoading(true);
      try {
        const data = await fetchUserBudgets(user.id);
        const formattedBudgets = data.map(b => ({
          id: b.id,
          category: b.category,
          amount: Number(b.amount),
          period: b.period as 'monthly' | 'yearly',
          startDate: new Date(b.start_date),
        }));
        setBudgets(formattedBudgets);
      } catch (error) {
        console.error("Error fetching budgets:", error);
        toast({
          title: "Erreur",
          description: "Impossible de récupérer vos budgets",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchBudgets();
  }, [user, toast]);

  // Calculate budget progress
  useEffect(() => {
    if (!budgets.length || !transactions.length) {
      setBudgetProgress([]);
      return;
    }

    const currentDate = new Date();
    const currentMonth = currentDate.getMonth();
    const currentYear = currentDate.getFullYear();
    
    // Filter transactions for the current month
    const currentMonthTransactions = transactions.filter(transaction => {
      const transactionDate = new Date(transaction.date);
      return transaction.type === 'expense' && 
             transactionDate.getMonth() === currentMonth &&
             transactionDate.getFullYear() === currentYear;
    });

    // Calculate spending per category
    const categorySpending: Record<string, number> = {};
    currentMonthTransactions.forEach(transaction => {
      const { category, amount } = transaction;
      categorySpending[category] = (categorySpending[category] || 0) + amount;
    });

    // Calculate progress for each budget
    const progress = budgets.map(budget => {
      const spentAmount = categorySpending[budget.category] || 0;
      const percentageUsed = budget.amount > 0 ? (spentAmount / budget.amount) * 100 : 0;
      const remainingAmount = budget.amount - spentAmount;

      return {
        category: budget.category,
        budgetAmount: budget.amount,
        spentAmount,
        percentageUsed: Math.min(100, percentageUsed),
        remainingAmount,
      };
    });

    setBudgetProgress(progress);
  }, [budgets, transactions]);

  // Add a budget
  const addBudget = async (budget: Omit<Budget, 'id'>) => {
    if (!user) return false;
    
    try {
      const newBudget = {
        ...budget,
        id: '' // ID will be generated by Supabase
      };
      
      const data = await addUserBudget(newBudget, user.id);
      
      setBudgets(prev => [
        ...prev,
        {
          id: data.id,
          category: data.category,
          amount: Number(data.amount),
          period: data.period as 'monthly' | 'yearly',
          startDate: new Date(data.start_date),
        }
      ]);
      
      toast({
        title: "Succès",
        description: "Budget ajouté avec succès",
      });
      
      return true;
    } catch (error) {
      console.error("Error adding budget:", error);
      toast({
        title: "Erreur",
        description: "Impossible d'ajouter le budget",
        variant: "destructive",
      });
      return false;
    }
  };

  // Update a budget
  const updateBudget = async (budget: Budget) => {
    if (!user) return false;
    
    try {
      await updateUserBudget(budget, user.id);
      
      setBudgets(prev => 
        prev.map(b => b.id === budget.id ? budget : b)
      );
      
      toast({
        title: "Succès",
        description: "Budget mis à jour avec succès",
      });
      
      return true;
    } catch (error) {
      console.error("Error updating budget:", error);
      toast({
        title: "Erreur",
        description: "Impossible de mettre à jour le budget",
        variant: "destructive",
      });
      return false;
    }
  };

  // Delete a budget
  const deleteBudget = async (budgetId: string) => {
    if (!user) return false;
    
    try {
      await deleteUserBudget(budgetId, user.id);
      
      setBudgets(prev => 
        prev.filter(b => b.id !== budgetId)
      );
      
      toast({
        title: "Succès",
        description: "Budget supprimé avec succès",
      });
      
      return true;
    } catch (error) {
      console.error("Error deleting budget:", error);
      toast({
        title: "Erreur",
        description: "Impossible de supprimer le budget",
        variant: "destructive",
      });
      return false;
    }
  };

  return {
    budgets,
    isLoading,
    budgetProgress,
    addBudget,
    updateBudget,
    deleteBudget
  };
};
